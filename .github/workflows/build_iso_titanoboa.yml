# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Build Live ISOs

on:
  workflow_dispatch:
  workflow_call:

env:
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-iso
  cancel-in-progress: true

jobs:
  build-iso:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        image_name:
          - bazzite
          - bazzite-nvidia
          - bazzite-nvidia-open
          - bazzite-gnome
          - bazzite-gnome-nvidia
          - bazzite-gnome-nvidia-open
          - bazzite-deck
          - bazzite-deck-gnome
          - bazzite-deck-nvidia
          # - bazzite-deck-nvidia-gnome
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@v1.3.1

      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set Image Tag
        id: generate-tag
        shell: bash
        run: |
          if [[ "${{ github.ref_name }}" == "testing" ]]; then
              TAG="testing"
          elif [[ "${{ github.ref_name }}" == "unstable" ]]; then
              TAG="unstable"
          else
              TAG="stable"
          fi

          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Using tag: ${TAG}"

      - name: Set Flatpaks Directory Shortname
        id: generate-flatpak-dir-shortname
        shell: bash
        run: |
          if [[ "${{ matrix.image_name }}" =~ "gnome" ]]; then
            FLATPAK_DIR_SHORTNAME="installer/gnome_flatpaks"
          else
            FLATPAK_DIR_SHORTNAME="installer/kde_flatpaks"
          fi

          echo "Checking Flatpak directory: ${FLATPAK_DIR_SHORTNAME}"
          if [ ! -d "${FLATPAK_DIR_SHORTNAME}" ]; then
            echo "Error: Flatpak directory ${FLATPAK_DIR_SHORTNAME} does not exist"
            exit 1
          fi

          # Check if flatpaks file exists
          FLATPAKS_FILE="${FLATPAK_DIR_SHORTNAME}/flatpaks"
          if [ ! -f "${FLATPAKS_FILE}" ]; then
            echo "Error: Flatpaks file ${FLATPAKS_FILE} does not exist"
            exit 1
          fi

          echo "Flatpaks file content:"
          cat "${FLATPAKS_FILE}"

          echo "flatpak-dir-shortname=${FLATPAK_DIR_SHORTNAME}" >> $GITHUB_OUTPUT
          echo "Using Flatpak directory: ${FLATPAK_DIR_SHORTNAME}"

      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      - name: Obtain non-deck image ref
        id: get-nondeck-ref
        shell: bash
        run: |
          ref="${{ matrix.image_name }}"
          ref="${ref/-deck/}"
          echo "ref=${ref}" >> $GITHUB_OUTPUT
          echo "Non-deck image reference: ${ref}"

      - name: Check Hook Scripts
        id: check-hooks
        shell: bash
        run: |
          echo "Checking Titanoboa hook scripts..."
          
          PRE_INITRAMFS_HOOK="${{ github.workspace }}/installer/titanoboa_hook_preinitramfs.sh"
          POST_ROOTFS_HOOK="${{ github.workspace }}/installer/titanoboa_hook_postrootfs.sh"
          
          if [ -f "${PRE_INITRAMFS_HOOK}" ]; then
            echo "Pre-initramfs hook found: ${PRE_INITRAMFS_HOOK}"
            chmod +x "${PRE_INITRAMFS_HOOK}" || true
          else
            echo "Warning: Pre-initramfs hook not found at ${PRE_INITRAMFS_HOOK}"
          fi
          
          if [ -f "${POST_ROOTFS_HOOK}" ]; then
            echo "Post-rootfs hook found: ${POST_ROOTFS_HOOK}"
            chmod +x "${POST_ROOTFS_HOOK}" || true
          else
            echo "Warning: Post-rootfs hook not found at ${POST_ROOTFS_HOOK}"
          fi

      - name: Verify Container Images Exist
        id: verify-images
        shell: bash
        run: |
          set -e
          BASE_IMAGE="${{ steps.registry_case.outputs.lowercase }}/${{ steps.get-nondeck-ref.outputs.ref }}:${{ steps.generate-tag.outputs.tag }}"
          CONTAINER_IMAGE="${{ steps.registry_case.outputs.lowercase }}/${{ matrix.image_name }}:${{ steps.generate-tag.outputs.tag }}"
          
          echo "Verifying base image exists: ${BASE_IMAGE}"
          if ! skopeo inspect "docker://${BASE_IMAGE}" > /dev/null 2>&1; then
            echo "Error: Base image ${BASE_IMAGE} does not exist or is not accessible"
            exit 1
          fi
          
          echo "Verifying container image exists: ${CONTAINER_IMAGE}"
          if ! skopeo inspect "docker://${CONTAINER_IMAGE}" > /dev/null 2>&1; then
            echo "Error: Container image ${CONTAINER_IMAGE} does not exist or is not accessible"
            exit 1
          fi
          
          echo "All required images are accessible"

      - name: Build ISOs
        uses: ublue-os/titanoboa@main
        id: build
        with:
          image-ref: ${{ steps.registry_case.outputs.lowercase }}/${{ steps.get-nondeck-ref.outputs.ref }}:${{ steps.generate-tag.outputs.tag }}
          container-image: ${{ steps.registry_case.outputs.lowercase }}/${{ matrix.image_name }}:${{ steps.generate-tag.outputs.tag }}
          iso-dest: ${{ matrix.image_name }}-${{ steps.generate-tag.outputs.tag }}-live.iso
          flatpaks-list: ${{ github.workspace }}/${{ steps.generate-flatpak-dir-shortname.outputs.flatpak-dir-shortname }}/flatpaks
          hook-pre-initramfs: ${{ github.workspace }}/installer/titanoboa_hook_preinitramfs.sh
          hook-post-rootfs: ${{ github.workspace }}/installer/titanoboa_hook_postrootfs.sh

      - name: Move ISOs to Upload Directory
        id: upload-directory
        shell: bash
        run: |
          set -e
          ISO_UPLOAD_DIR="${{ github.workspace }}/upload"
          
          echo "Build outputs:"
          echo "ISO Dest: ${{ steps.build.outputs.iso-dest }}"
          
          if [ ! -f "${{ steps.build.outputs.iso-dest }}" ]; then
            echo "Error: ISO file not found at ${{ steps.build.outputs.iso-dest }}"
            exit 1
          fi
          
          mkdir -p "${ISO_UPLOAD_DIR}"
          ISO_FILENAME=$(basename "${{ steps.build.outputs.iso-dest }}")
          DEST="${ISO_UPLOAD_DIR}/${ISO_FILENAME}"
          
          echo "Moving ISO to: ${DEST}"
          mv "${{ steps.build.outputs.iso-dest }}" "${DEST}"
          
          echo "Generating checksum..."
          cd "${ISO_UPLOAD_DIR}"
          sha256sum "${ISO_FILENAME}" > "${ISO_FILENAME}-CHECKSUM"
          
          echo "Upload directory contents:"
          ls -la "${ISO_UPLOAD_DIR}"
          
          echo "iso-upload-dir=${ISO_UPLOAD_DIR}" >> $GITHUB_OUTPUT

      - name: Upload ISOs and Checksum to Job Artifacts
        if: github.ref_name == 'testing' || github.ref_name == 'unstable'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.image_name }}-${{ steps.generate-tag.outputs.tag }}-live
          path: ${{ steps.upload-directory.outputs.iso-upload-dir }}/*
          if-no-files-found: error
          retention-days: 7
          compression-level: 0
          overwrite: true

      - name: Upload ISOs and Checksum to R2
        if: github.event_name == 'workflow_dispatch' && github.ref_name == 'main'
        shell: bash
        env:
          RCLONE_CONFIG_R2_TYPE: s3
          RCLONE_CONFIG_R2_PROVIDER: Cloudflare
          RCLONE_CONFIG_R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          RCLONE_CONFIG_R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          RCLONE_CONFIG_R2_REGION: auto
          RCLONE_CONFIG_R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
          SOURCE_DIR: ${{ steps.upload-directory.outputs.iso-upload-dir }}
        run: |
          set -e
          echo "Installing rclone..."
          sudo apt-get update
          sudo apt-get install -y rclone
          
          echo "Configuring rclone..."
          mkdir -p ~/.config/rclone
          
          # Create rclone configuration
          cat << EOF > ~/.config/rclone/rclone.conf
          [R2]
          type = s3
          provider = Cloudflare
          access_key_id = ${{ secrets.R2_ACCESS_KEY_ID }}
          secret_access_key = ${{ secrets.R2_SECRET_ACCESS_KEY }}
          region = auto
          endpoint = ${{ secrets.R2_ENDPOINT }}
          EOF
          
          echo "Checking source directory..."
          ls -la "$SOURCE_DIR"
          
          echo "Uploading to R2..."
          if ! rclone copy "$SOURCE_DIR" "R2:bazzite" --progress --verbose; then
            echo "Error: Failed to upload to R2"
            exit 1
          fi
          
          echo "Upload completed successfully"

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up temporary files..."
          sudo docker system prune -f || true
          sudo rm -rf "${{ github.workspace }}/upload" || true

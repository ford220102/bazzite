name: Build Bazzite
on:
  pull_request:
    branches:
      - testing
      - unstable
    paths-ignore:
      - "**.md"
      - "**.txt"
      - "installer/**"
      - "repo_content/**"
      - "spec_files/**"
      - "post_install_files/**"
      - "press_kit/**"
      - "docs/**"
      - ".github/workflows/build_iso*.yml"
  push:
    branches:
      - testing
      - unstable
    paths-ignore:
      - "**.md"
      - "**.txt"
      - "repo_content/**"
      - "spec_files/**"
      - "post_install_files/**"
      - "press_kit/**"
      - ".github/workflows/build_iso*.yml"
  merge_group:
  workflow_dispatch:
    inputs:
      handwritten:
        description: 'Small changelog:'
      fresh-rechunk:
        description: 'Clear rechunk history'
        type: boolean
        default: false

env:
  PULL_IMAGE_REGISTRY: ghcr.io/ublue-os
  PUSH_IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  push-ghcr:
    name: Build Bazzite Image
    runs-on: ubuntu-24.04
    timeout-minutes: 120
    continue-on-error: false
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - base_image_flavor: main
            base_name: bazzite
            base_image_name: kinoite
            target_image_flavor: main
            target_nvidia_flavor: nvidia-open
            fedora_version: 42
            is_latest_version: true
            is_stable_version: true
            kernel_flavor: bazzite
            kernel_version: 6.16.4-116.bazzite.fc42.x86_64

          - base_image_flavor: main
            base_name: bazzite
            base_image_name: silverblue
            target_image_flavor: main
            target_nvidia_flavor: nvidia-open
            fedora_version: 42
            is_latest_version: true
            is_stable_version: true
            kernel_flavor: bazzite
            kernel_version: 6.16.4-116.bazzite.fc42.x86_64

          - base_image_flavor: main
            base_name: bazzite
            base_image_name: kinoite
            target_image_flavor: asus
            target_nvidia_flavor: nvidia-open
            fedora_version: 42
            is_latest_version: true
            is_stable_version: true
            kernel_flavor: bazzite
            kernel_version: 6.16.4-116.bazzite.fc42.x86_64

          - base_image_flavor: main
            base_name: bazzite
            base_image_name: silverblue
            target_image_flavor: asus
            target_nvidia_flavor: nvidia-open
            fedora_version: 42
            is_latest_version: true
            is_stable_version: true
            kernel_flavor: bazzite
            kernel_version: 6.16.4-116.bazzite.fc42.x86_64

          - base_image_flavor: main
            base_name: bazzite
            base_image_name: kinoite
            target_image_flavor: surface
            target_nvidia_flavor: nvidia-open
            fedora_version: 42
            is_latest_version: true
            is_stable_version: true
            kernel_flavor: bazzite
            kernel_version: 6.16.4-116.bazzite.fc42.x86_64

          - base_image_flavor: main
            base_name: bazzite-deck
            base_image_name: kinoite
            target_image_flavor: main
            target_nvidia_flavor: nvidia-open
            fedora_version: 42
            is_latest_version: true
            is_stable_version: true
            kernel_flavor: bazzite
            kernel_version: 6.16.4-116.bazzite.fc42.x86_64

          - base_image_flavor: main
            base_name: bazzite-deck
            base_image_name: kinoite
            target_image_flavor: asus
            target_nvidia_flavor: nvidia-open
            fedora_version: 42
            is_latest_version: true
            is_stable_version: true
            kernel_flavor: bazzite
            kernel_version: 6.16.4-116.bazzite.fc42.x86_64

          - base_image_flavor: main
            base_name: bazzite-nvidia
            base_image_name: kinoite
            target_image_flavor: main
            target_nvidia_flavor: nvidia
            fedora_version: 42
            is_latest_version: true
            is_stable_version: true
            kernel_flavor: bazzite
            kernel_version: 6.16.4-116.bazzite.fc42.x86_64

          - base_image_flavor: main
            base_name: bazzite-nvidia
            base_image_name: silverblue
            target_image_flavor: main
            target_nvidia_flavor: nvidia
            fedora_version: 42
            is_latest_version: true
            is_stable_version: true
            kernel_flavor: bazzite
            kernel_version: 6.16.4-116.bazzite.fc42.x86_64

          - base_image_flavor: main
            base_name: bazzite-deck-nvidia
            base_image_name: kinoite
            target_image_flavor: main
            target_nvidia_flavor: nvidia
            fedora_version: 42
            is_latest_version: true
            is_stable_version: true
            kernel_flavor: bazzite
            kernel_version: 6.16.4-116.bazzite.fc42.x86_64

    steps:
      - name: Mount BTRFS for podman storage
        uses: ublue-os/container-storage-action@main
        with:
          target-dir: /var/lib/containers

      - name: Cache Buildah layers
        uses: actions/cache@v3
        with:
          path: /var/lib/containers
          key: buildah-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            buildah-${{ runner.os }}-

      - name: Define env.CONTAINER_TARGET
        run: |
          if [[ "${{ matrix.base_name }}" == "bazzite-deck-nvidia" ]]; then
              echo "CONTAINER_TARGET=bazzite-nvidia" >> $GITHUB_ENV
          else
              echo "CONTAINER_TARGET=${{ matrix.base_name }}" >> $GITHUB_ENV
          fi

      - name: Define env.IMAGE_FLAVOR
        run: |
          if [[ "${{ matrix.base_name }}" =~ "nvidia" ]]; then
              if [[ "${{ matrix.target_image_flavor }}" == "main" ]]; then
                  echo "IMAGE_FLAVOR=${{ matrix.target_nvidia_flavor }}" >> $GITHUB_ENV
              else
                  echo "IMAGE_FLAVOR=${{ format('{0}-{1}', matrix.target_image_flavor, matrix.target_nvidia_flavor) }}" >> $GITHUB_ENV
              fi
          else
              echo "IMAGE_FLAVOR=${{ matrix.target_image_flavor }}" >> $GITHUB_ENV
          fi

      - name: Define env.IMAGE_NAME
        run: |
          DESKTOP=""
          if [[ "${{ matrix.base_image_name }}" == "silverblue" ]]; then
              DESKTOP="-gnome"
          fi

          if [[ "${{ matrix.base_name }}" == "bazzite-deck" ]]; then
              if [[ "${{ matrix.target_image_flavor }}" == "asus" ]]; then
                  echo "IMAGE_NAME=${{ format('{0}{1}', 'bazzite-ally', '${DESKTOP}') }}" >> $GITHUB_ENV
              else
                  echo "IMAGE_NAME=${{ format('{0}{1}', 'bazzite-deck', '${DESKTOP}') }}" >> $GITHUB_ENV
              fi
          elif [[ "${{ matrix.base_name }}" == "bazzite-deck-nvidia" ]]; then
              echo "IMAGE_NAME=${{ format('{0}{1}', 'bazzite-deck-nvidia', '${DESKTOP}') }}" >> $GITHUB_ENV
          else
              if [[ "${{ env.IMAGE_FLAVOR }}" == "main" ]]; then
                  echo "IMAGE_NAME=${{ format('{0}{1}', 'bazzite', '${DESKTOP}') }}" >> $GITHUB_ENV
              else
                  echo "IMAGE_NAME=${{ format('{0}{1}-{2}', 'bazzite', '${DESKTOP}', env.IMAGE_FLAVOR) }}" >> $GITHUB_ENV
              fi
          fi

      - name: Define env.NVIDIA_BASE
        run: |
          if [[ "${{ matrix.base_name }}" == "bazzite-deck-nvidia" ]]; then
              echo "NVIDIA_BASE=bazzite-deck" >> $GITHUB_ENV
          else
              echo "NVIDIA_BASE=bazzite" >> $GITHUB_ENV
          fi

      - name: Define env.SHA_HEAD_SHORT
        run: |
          echo "SHA_HEAD_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check just syntax
        uses: ublue-os/just-action@v2

      - name: Download offline docs
        id: download_offline_docs
        continue-on-error: true
        env:
          docs_repo: bazzite-org/docs.bazzite.gg
          GH_TOKEN: ${{ github.token }}
        run: |
          DOCS_DIR="${{ github.workspace }}/system_files/desktop/shared/usr/share/ublue-os/docs/html"
          mkdir -p "$DOCS_DIR"
          cd $(mktemp -d)
          
          echo "Downloading documentation from $docs_repo..."
          if ! gh run download --repo="$docs_repo" -n github-pages; then
            echo "Warning: Failed to download docs from $docs_repo, continuing without them"
            exit 0
          fi
          
          if [ -f artifact.tar ]; then
            echo "Extracting documentation..."
            tar -xC "$DOCS_DIR" -f artifact.tar
            echo "Documentation extracted successfully"
          else
            echo "No artifact.tar found, continuing without docs"
          fi

      - name: Pull base images with retry
        uses: Wandalen/wretry.action@v3.8.0
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            set -e
            echo "Pulling base image..."
            sudo podman pull "${{ env.PULL_IMAGE_REGISTRY }}/${{ matrix.base_image_name }}-${{ matrix.base_image_flavor }}:${{ matrix.fedora_version }}"
            
            echo "Pulling akmods images..."
            sudo podman pull "${{ env.PULL_IMAGE_REGISTRY }}/akmods:${{ matrix.kernel_flavor}}-${{ matrix.fedora_version }}-${{ matrix.kernel_version }}"
            sudo podman pull "${{ env.PULL_IMAGE_REGISTRY }}/akmods-${{ matrix.target_nvidia_flavor }}:${{ matrix.kernel_flavor}}-${{ matrix.fedora_version }}-${{ matrix.kernel_version }}"

      - name: Get source versions
        id: labels
        uses: Wandalen/wretry.action@v3.8.0
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            set -eo pipefail
            echo "Inspecting source image..."
            skopeo inspect "docker://${{ env.PULL_IMAGE_REGISTRY }}/${{ matrix.base_image_name }}-${{ matrix.base_image_flavor }}:${{ matrix.fedora_version }}" > source.json
            
            ver=$(jq -r '.Labels["org.opencontainers.image.version"]' source.json)
            if [ -z "$ver" ] || [ "null" = "$ver" ]; then
              echo "Error: inspected image version must not be empty or null"
              exit 1
            fi
            echo "SOURCE_IMAGE_VERSION=$ver" >> $GITHUB_ENV
            echo "Source image version: $ver"
      
      - name: Generate Version
        id: generate-version
        shell: bash
        run: |
          UPSTREAM_TAG="${{ env.SOURCE_IMAGE_VERSION }}"
          UPSTREAM_TAG="${UPSTREAM_TAG%\.[0-9]}"
          FEDORA_VERSION="${{ matrix.fedora_version }}"
          SHA_SHORT="${GITHUB_SHA::7}"

          if [ -n "${{ github.event.pull_request.number }}" ]; then
            VERSION="pr-${FEDORA_VERSION}-${{ github.event.pull_request.number }}"
            PRETTY_VERSION="PR (${{ github.event.pull_request.number }}, ${UPSTREAM_TAG})"
          elif [[ "${{ github.ref_name }}" == "unstable" ]]; then
            VERSION="unstable-${UPSTREAM_TAG}"
            PRETTY_VERSION="Unstable (F${UPSTREAM_TAG}, #${SHA_SHORT})"
          elif [[ "${{ github.ref_name }}" == "testing" ]]; then
            VERSION="testing-${UPSTREAM_TAG}"
            PRETTY_VERSION="Testing (F${UPSTREAM_TAG}, #${SHA_SHORT})"
          else
            VERSION="${UPSTREAM_TAG}"
            PRETTY_VERSION="Stable (F${UPSTREAM_TAG})"
          fi
          
          echo "tag=${VERSION}" >> $GITHUB_OUTPUT
          echo "pretty=${PRETTY_VERSION}" >> $GITHUB_OUTPUT
          echo "Generated version: ${VERSION}"
          echo "Pretty version: ${PRETTY_VERSION}"

      - name: Prepare build args file
        id: prepare-build-args
        run: |
          cat << EOF > build_args.txt
          IMAGE_NAME=${{ env.IMAGE_NAME }}
          IMAGE_FLAVOR=${{ env.IMAGE_FLAVOR }}
          NVIDIA_FLAVOR=${{ matrix.target_nvidia_flavor }}
          NVIDIA_BASE=${{ env.NVIDIA_BASE }}
          IMAGE_VENDOR=${{ github.repository_owner }}
          BASE_IMAGE_NAME=${{ matrix.base_image_name }}
          BASE_IMAGE_FLAVOR=${{ matrix.base_image_flavor }}
          FEDORA_VERSION=${{ matrix.fedora_version }}
          KERNEL_FLAVOR=${{ matrix.kernel_flavor }}
          KERNEL_VERSION=${{ matrix.kernel_version }}
          IMAGE_BRANCH=${{ github.ref_name }}
          SHA_HEAD_SHORT=${{ env.SHA_HEAD_SHORT }}
          VERSION_TAG=${{ steps.generate-version.outputs.tag }}
          VERSION_PRETTY=${{ steps.generate-version.outputs.pretty }}
          EOF
          
          echo "Build args file created:"
          cat build_args.txt

      - name: Validate build args
        run: |
          if [ ! -f build_args.txt ] || [ ! -s build_args.txt ]; then
            echo "Error: build_args.txt is missing or empty"
            exit 1
          fi
          
          required_vars=("IMAGE_NAME" "FEDORA_VERSION" "VERSION_TAG")
          for var in "${required_vars[@]}"; do
            if ! grep -q "^${var}=" build_args.txt; then
              echo "Error: Required variable ${var} not found in build_args.txt"
              exit 1
            fi
          done
          echo "Build args validation passed"

      - name: Build Image
        id: build_image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          echo "Starting image build for target: ${{ env.CONTAINER_TARGET }}"
          
          sudo -E buildah build \
            --target ${{ env.CONTAINER_TARGET }} \
            --build-arg-file build_args.txt \
            --secret "id=GITHUB_TOKEN,env=GITHUB_TOKEN" \
            --tag raw-img \
            --file Containerfile .
          
          echo "Image build completed successfully"
          sudo buildah images

      - name: Clean up auxiliary images
        run: |
          set +e
          echo "Cleaning up auxiliary images to free up space..."
          sudo podman image rm "${{ env.PULL_IMAGE_REGISTRY }}/${{ matrix.base_image_name }}-${{ matrix.base_image_flavor }}:${{ matrix.fedora_version }}" || echo "Base image already removed or not found"
          sudo podman image rm "${{ env.PULL_IMAGE_REGISTRY }}/akmods:${{ matrix.kernel_flavor}}-${{ matrix.fedora_version }}-${{ matrix.kernel_version }}" || echo "Akmods image already removed or not found"
          sudo podman image rm "${{ env.PULL_IMAGE_REGISTRY }}/akmods-${{ matrix.target_nvidia_flavor }}:${{ matrix.kernel_flavor}}-${{ matrix.fedora_version }}-${{ matrix.kernel_version }}" || echo "Nvidia akmods image already removed or not found"
          echo "Cleanup completed"

      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.PUSH_IMAGE_REGISTRY }}

      - name: Generate previous reference
        id: generate-prev-ref
        shell: bash
        run: |
          if [ "${{ github.event.inputs.fresh-rechunk }}" == "true" ]; then
            IMAGEREF=""
            echo "Fresh rechunk requested, no previous reference"
          else
            IMAGEREF="${{ steps.registry_case.outputs.lowercase }}/${{ env.IMAGE_NAME }}:stable"
            echo "Using previous reference: $IMAGEREF"
          fi

          echo "ref=${IMAGEREF}" >> $GITHUB_OUTPUT

      - name: Check Secureboot signatures
        shell: bash
        run: |
          set -e
          echo "Checking Secureboot signatures..."
          
          # Install required tools
          if [[ ! $(command -v sbverify) || ! $(command -v curl) || ! $(command -v openssl) ]]; then
            sudo apt update
            sudo apt install -y sbsigntool curl openssl ca-certificates
          fi
          
          # Extract kernel
          TMP_CONTAINER=$(sudo podman create raw-img bash)
          sudo podman cp "$TMP_CONTAINER:/usr/lib/modules/${{ matrix.kernel_version }}/vmlinuz" . || {
            echo "Error: Failed to extract vmlinuz"
            sudo podman rm "$TMP_CONTAINER"
            exit 1
          }
          sudo podman rm "$TMP_CONTAINER"
          
          # Verify file exists and set permissions
          if [ ! -f vmlinuz ]; then
            echo "Error: vmlinuz not found after extraction"
            exit 1
          fi
          sudo chmod 644 vmlinuz
          
          # Download and verify certificates
          echo "Downloading signing certificates..."
          curl --retry 3 -Lo kernel-sign.der https://github.com/ublue-os/kernel-cache/raw/main/certs/public_key.der || {
            echo "Error: Failed to download kernel certificate"
            exit 1
          }
          curl --retry 3 -Lo akmods.der https://github.com/ublue-os/kernel-cache/raw/main/certs/public_key_2.der || {
            echo "Error: Failed to download akmods certificate"
            exit 1
          }
          
          # Convert certificates
          openssl x509 -inform der -in kernel-sign.der -out kernel-sign.crt || {
            echo "Error: Failed to convert kernel certificate"
            exit 1
          }
          openssl x509 -inform der -in akmods.der -out akmods.crt || {
            echo "Error: Failed to convert akmods certificate"
            exit 1
          }
          
          # Verify signatures
          echo "Verifying kernel signature with kernel certificate..."
          if ! sbverify --cert kernel-sign.crt vmlinuz; then
            echo "Error: Kernel signature verification failed with kernel certificate"
            exit 1
          fi
          
          echo "Verifying kernel signature with akmods certificate..."
          if ! sbverify --cert akmods.crt vmlinuz; then
            echo "Error: Kernel signature verification failed with akmods certificate"
            exit 1
          fi
          
          echo "Secureboot signature verification passed"

      - name: Run Rechunker
        id: rechunk
        uses: hhd-dev/rechunk@v1.2.4
        with:
          rechunk: 'ghcr.io/hhd-dev/rechunk:v1.2.4'
          ref: 'raw-img'
          prev-ref: '${{ steps.generate-prev-ref.outputs.ref }}'
          version: '${{ steps.generate-version.outputs.tag }}'
          labels: |
            io.artifacthub.package.logo-url=https://raw.githubusercontent.com/ublue-os/bazzite/main/repo_content/logo.png
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/ublue-os/bazzite/refs/heads/main/README.md
            org.opencontainers.image.created=<timestamp>
            org.opencontainers.image.description=Bazzite is a custom image built upon Fedora Atomic Desktops that brings the best of Linux gaming to all of your devices - including your favorite handheld.
            org.opencontainers.image.licenses=Apache-2.0
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=https://github.com/ublue-os/bazzite
            org.opencontainers.image.title=Bazzite
            org.opencontainers.image.vendor=Universal Blue
            org.opencontainers.image.url=https://bazzite.gg
            org.universal-blue.pkg.kernel=<relver:kernel>
            org.universal-blue.pkg.gamescope=<relver:gamescope>

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          VERSION_TAG="${{ steps.rechunk.outputs.version }}"
          UPSTREAM_TAG="${{ env.SOURCE_IMAGE_VERSION }}"
          FEDORA_VERSION="${{ matrix.fedora_version }}"
          SHA_SHORT="${GITHUB_SHA::7}"
          
          BUILD_TAGS=("${VERSION_TAG}")
          unset LATEST
          
          if [[ "${{ matrix.is_latest_version }}" == "true" ]] && \
             [[ "${{ matrix.is_stable_version }}" == "true" ]]; then
            LATEST="1"
          fi

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if [ -n "$LATEST" ]; then
              BUILD_TAGS+=("pr-${{ github.event.pull_request.number }}")
            fi
          elif [[ "${{ github.ref_name }}" == "unstable" ]]; then
            BUILD_TAGS+=("${FEDORA_VERSION}-unstable")
            BUILD_TAGS+=("unstable-${FEDORA_VERSION}")
            if [ -n "$LATEST" ]; then
              BUILD_TAGS+=("unstable")
            fi
          elif [[ "${{ github.ref_name }}" == "testing" ]]; then
            BUILD_TAGS+=("${FEDORA_VERSION}-testing")
            BUILD_TAGS+=("testing-${FEDORA_VERSION}")
            if [ -n "$LATEST" ]; then
              BUILD_TAGS+=("testing")
            fi
          else
            BUILD_TAGS+=("${FEDORA_VERSION}")
            BUILD_TAGS+=("stable-${VERSION_TAG}")
            BUILD_TAGS+=("${FEDORA_VERSION}-stable")
            BUILD_TAGS+=("stable-${FEDORA_VERSION}")
            if [ -n "$LATEST" ]; then
              BUILD_TAGS+=("latest" "stable")
            fi
          fi
          
          echo "Generated build tags:"
          for TAG in "${BUILD_TAGS[@]}"; do
            echo "  - ${TAG}"
          done
          
          echo "alias_tags=$(IFS=,; echo "${BUILD_TAGS[*]}")" >> $GITHUB_OUTPUT

      - name: Install Cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.10.0

      - name: Push To GHCR and Sign
        uses: Wandalen/wretry.action@v3.8.0
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            set -e
            echo "Pushing images to GHCR..."
            
            echo "${{ secrets.GITHUB_TOKEN }}" | sudo podman login ghcr.io -u "${{ github.actor }}" --password-stdin
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
            
            IFS=',' read -ra TAGS <<< "${{ steps.generate-tags.outputs.alias_tags }}"
            
            echo "## Push Results" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            
            for tag in "${TAGS[@]}"; do
              dest_image="${{ steps.registry_case.outputs.lowercase }}/${{ env.IMAGE_NAME }}:${tag}"
              echo "Pushing: ${dest_image}"
              sudo skopeo copy "${{ steps.rechunk.outputs.ref }}" "docker://${dest_image}"
              echo "${dest_image}" >> $GITHUB_STEP_SUMMARY
            done
            
            echo '```' >> $GITHUB_STEP_SUMMARY
            
            DIGEST=$(sudo skopeo inspect --format '{{.Digest}}' "${{ steps.rechunk.outputs.ref }}")
            echo "Signing image with digest: ${DIGEST}"
            
            cosign sign -y --key env://SIGNING_SECRET --new-bundle-format=false \
              "${{ steps.registry_case.outputs.lowercase }}/${{ env.IMAGE_NAME }}@${DIGEST}"
            
            echo "Image push and signing completed successfully"
        env:
          SIGNING_SECRET: ${{ secrets.SIGNING_SECRET }}

  generate_release:
    name: Generate Release
    needs: [push-ghcr]
    if: github.event_name != 'pull_request'
    secrets: inherit
    uses: ./.github/workflows/generate_release.yml

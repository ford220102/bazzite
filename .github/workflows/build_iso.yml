name: Build ISOs

on:
  workflow_dispatch:
  workflow_call:

env:
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-iso
  cancel-in-progress: true

jobs:
  build-iso:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        image_name:
          - bazzite
          - bazzite-nvidia
          - bazzite-nvidia-open
          - bazzite-gnome
          - bazzite-gnome-nvidia
          - bazzite-gnome-nvidia-open
          - bazzite-deck
          - bazzite-deck-gnome
          - bazzite-ally
          - bazzite-ally-gnome
          - bazzite-asus
          - bazzite-gnome-asus
          - bazzite-asus-nvidia
          - bazzite-gnome-asus-nvidia
          - bazzite-asus-nvidia-open
          - bazzite-gnome-asus-nvidia-open
          - bazzite-surface
          - bazzite-gnome-surface
          - bazzite-surface-nvidia-open
          - bazzite-gnome-surface-nvidia-open
          - bazzite-deck-nvidia
          - bazzite-deck-nvidia-gnome
        major_version: [41]
    steps:

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@v1.3.1

      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set Image Tag
        id: generate-tag
        shell: bash
        run: |
          if [[ "${{ github.ref_name }}" == "testing" ]]; then
              TAG="testing"
          elif [[ "${{ github.ref_name }}" == "unstable" ]]; then
              TAG="unstable"
          else
              TAG="stable"
          fi

          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Using tag: ${TAG}"

      - name: Set Flatpaks Directory Shortname
        id: generate-flatpak-dir-shortname
        shell: bash
        run: |
          if [[ "${{ matrix.image_name }}" =~ "gnome" ]]; then
            FLATPAK_DIR_SHORTNAME="installer/gnome_flatpaks"
          else
            FLATPAK_DIR_SHORTNAME="installer/kde_flatpaks"
          fi

          echo "Checking if directory exists: ${FLATPAK_DIR_SHORTNAME}"
          if [ ! -d "${{ github.workspace }}/${FLATPAK_DIR_SHORTNAME}" ]; then
            echo "Error: Directory ${FLATPAK_DIR_SHORTNAME} does not exist"
            exit 1
          fi

          echo "flatpak-dir-shortname=${FLATPAK_DIR_SHORTNAME}" >> $GITHUB_OUTPUT
          echo "Using flatpak directory: ${FLATPAK_DIR_SHORTNAME}"

      - name: Generate Extra Boot Parameters
        id: generate-extra-params
        shell: bash
        run: |
          EXTRA_PARAMS=""
          echo "extra-boot-params=${EXTRA_PARAMS}" >> $GITHUB_OUTPUT

      # Docker requires lowercase registry references
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      - name: Determine Flatpak Dependencies
        id: flatpak_dependencies
        shell: bash
        run: |
          set -ex
          image="${{ steps.registry_case.outputs.lowercase }}/${{ matrix.image_name }}:${{ steps.generate-tag.outputs.tag }}"
          
          echo "Using image: ${image}"
          echo "Flatpak directory: ${{ steps.generate-flatpak-dir-shortname.outputs.flatpak-dir-shortname }}"
          
          # Make temp space
          TEMP_FLATPAK_INSTALL_DIR=$(mktemp -d -p "${{ github.workspace }}" flatpak.XXX)
          echo "Temp directory: ${TEMP_FLATPAK_INSTALL_DIR}"
          
          # Get list of refs from directory
          FLATPAK_REFS_DIR="${{ github.workspace }}/${{ steps.generate-flatpak-dir-shortname.outputs.flatpak-dir-shortname }}"
          echo "Flatpak refs directory: ${FLATPAK_REFS_DIR}"
          
          # Check if flatpak refs files exist
          if [ ! -d "${FLATPAK_REFS_DIR}" ]; then
            echo "Error: Flatpak refs directory ${FLATPAK_REFS_DIR} does not exist"
            exit 1
          fi
          
          FLATPAK_REFS_FILES=$(find "${FLATPAK_REFS_DIR}" -name "*.txt" -type f)
          if [ -z "${FLATPAK_REFS_FILES}" ]; then
            echo "Warning: No flatpak refs files found in ${FLATPAK_REFS_DIR}"
            touch "${FLATPAK_REFS_DIR}/flatpaks_with_deps"
            exit 0
          fi
          
          FLATPAK_REFS_DIR_LIST=$(cat ${FLATPAK_REFS_DIR}/*.txt | tr '\n' ' ' )
          echo "Flatpak refs: ${FLATPAK_REFS_DIR_LIST}"
          
          # Generate install script
          cat << EOF > "${TEMP_FLATPAK_INSTALL_DIR}/script.sh"
          #!/bin/bash
          set -ex
          echo "Setting up Flatpak environment..."
          mkdir -p /flatpak/flatpak /flatpak/triggers
          mkdir -p /var/tmp
          chmod -R 1777 /var/tmp
          
          echo "Configuring Flatpak..."
          flatpak config --system --set languages "*"
          flatpak remote-add --system flathub https://flathub.org/repo/flathub.flatpakrepo --if-not-exists
          
          echo "Installing Flatpaks: ${FLATPAK_REFS_DIR_LIST}"
          if ! flatpak install --system -y ${FLATPAK_REFS_DIR_LIST}; then
            echo "Warning: Some flatpaks failed to install, continuing..."
          fi
          
          echo "Exporting installed flatpaks..."
          ostree refs --repo=\${FLATPAK_SYSTEM_DIR}/repo | grep '^deploy/' | grep -v 'org\.freedesktop\.Platform\.openh264' | sed 's/^deploy\///g' > /output/flatpaks_with_deps || {
            echo "Warning: Failed to export flatpak dependencies"
            touch /output/flatpaks_with_deps
          }
          
          echo "Flatpak dependency resolution completed"
          EOF
          
          chmod +x "${TEMP_FLATPAK_INSTALL_DIR}/script.sh"
          
          echo "Running Flatpak dependency resolution in container..."
          if ! docker run --rm --privileged \
            --entrypoint bash \
            -e FLATPAK_SYSTEM_DIR=/flatpak/flatpak \
            -e FLATPAK_TRIGGERSDIR=/flatpak/triggers \
            --volume "${FLATPAK_REFS_DIR}:/output" \
            --volume "${TEMP_FLATPAK_INSTALL_DIR}:/temp_flatpak_install_dir" \
            "${image}" /temp_flatpak_install_dir/script.sh; then
            echo "Warning: Flatpak dependency resolution failed, continuing without dependencies"
            touch "${FLATPAK_REFS_DIR}/flatpaks_with_deps"
          fi
          
          # Cleanup
          rm -rf "${TEMP_FLATPAK_INSTALL_DIR}"
          
          echo "Flatpak dependencies:"
          cat "${FLATPAK_REFS_DIR}/flatpaks_with_deps" || echo "No flatpak dependencies file found"

      - name: Setup Bazzite Repo
        id: setup-bazzite-repo
        shell: bash
        run: |
          set -e
          REPO_URL="https://copr.fedorainfracloud.org/coprs/bazzite-org/bazzite/repo/fedora-${{ matrix.major_version }}/bazzite-org-bazzite-fedora-${{ matrix.major_version }}.repo"
          REPO_PATH="${{ github.workspace }}/bazzite.repo"
          
          echo "Downloading Bazzite repo from: ${REPO_URL}"
          if ! curl -f -Lo "${REPO_PATH}" "${REPO_URL}"; then
            echo "Error: Failed to download Bazzite repo file"
            exit 1
          fi
          
          if [ ! -s "${REPO_PATH}" ]; then
            echo "Error: Downloaded repo file is empty"
            exit 1
          fi
          
          echo "Bazzite repo file downloaded successfully:"
          cat "${REPO_PATH}"

      - name: Build ISOs
        uses: jasonn3/build-container-installer@v1.2.4
        id: build
        with:
          arch: x86_64
          image_name: ${{ matrix.image_name }}
          image_repo: ${{ steps.registry_case.outputs.lowercase }}
          variant: 'Kinoite'
          version: ${{ matrix.major_version }}
          image_tag: ${{ steps.generate-tag.outputs.tag }}
          secure_boot_key_url: '${{ github.server_url }}/${{ github.repository }}/raw/main/secure_boot.der'
          enrollment_password: 'universalblue'
          iso_name: ${{ matrix.image_name }}-${{ steps.generate-tag.outputs.tag }}-amd64.iso
          enable_cache_dnf: "false"
          enable_cache_skopeo: "false"
          flatpak_remote_refs_dir: ${{ steps.generate-flatpak-dir-shortname.outputs.flatpak-dir-shortname }}
          enable_flatpak_dependencies: "false"
          extra_boot_params: ${{ steps.generate-extra-params.outputs.extra-boot-params }}
          additional_templates: '/github/workspace/installer/lorax_templates/remove_root_password_prompt.tmpl /github/workspace/installer/lorax_templates/set_default_user.tmpl'
          repos: '/github/workspace/bazzite.repo /etc/yum.repos.d/fedora.repo /etc/yum.repos.d/fedora-updates.repo'

      - name: Move ISOs to Upload Directory
        id: upload-directory
        shell: bash
        run: |
          set -e
          ISO_UPLOAD_DIR="${{ github.workspace }}/upload"
          mkdir -p "${ISO_UPLOAD_DIR}"
          
          echo "Build outputs:"
          echo "ISO Path: ${{ steps.build.outputs.iso_path }}"
          echo "ISO Name: ${{ steps.build.outputs.iso_name }}"
          
          if [ -d "${{ steps.build.outputs.iso_path }}" ]; then
            echo "Contents of ISO directory:"
            ls -la "${{ steps.build.outputs.iso_path }}"
            
            if [ -f "${{ steps.build.outputs.iso_path }}/${{ steps.build.outputs.iso_name }}" ]; then
              mv "${{ steps.build.outputs.iso_path }}/${{ steps.build.outputs.iso_name }}" "${ISO_UPLOAD_DIR}/"
              echo "ISO moved successfully"
            else
              echo "Error: ISO file not found at expected path"
              exit 1
            fi
            
            if [ -f "${{ steps.build.outputs.iso_path }}/${{ steps.build.outputs.iso_name }}-CHECKSUM" ]; then
              mv "${{ steps.build.outputs.iso_path }}/${{ steps.build.outputs.iso_name }}-CHECKSUM" "${ISO_UPLOAD_DIR}/"
              echo "Checksum moved successfully"
            else
              echo "Warning: Checksum file not found"
            fi
          else
            echo "Error: ISO directory not found"
            exit 1
          fi
          
          echo "Final upload directory contents:"
          ls -la "${ISO_UPLOAD_DIR}"
          
          echo "iso-upload-dir=${ISO_UPLOAD_DIR}" >> $GITHUB_OUTPUT

      - name: Upload ISOs and Checksum to Job Artifacts
        if: github.ref_name == 'testing' || github.ref_name == 'unstable'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.image_name }}-${{ steps.generate-tag.outputs.tag }}-${{ matrix.major_version}}
          path: ${{ steps.upload-directory.outputs.iso-upload-dir }}/*
          if-no-files-found: error
          retention-days: 7
          compression-level: 0
          overwrite: true

      - name: Upload ISOs and Checksum to R2
        if: github.event_name == 'workflow_dispatch' && github.ref_name == 'main'
        shell: bash
        env:
          RCLONE_CONFIG_R2_TYPE: s3
          RCLONE_CONFIG_R2_PROVIDER: Cloudflare
          RCLONE_CONFIG_R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          RCLONE_CONFIG_R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          RCLONE_CONFIG_R2_REGION: auto
          RCLONE_CONFIG_R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
          SOURCE_DIR: ${{ steps.upload-directory.outputs.iso-upload-dir }}
        run: |
          set -e
          echo "Installing rclone..."
          sudo apt-get update
          sudo apt-get install -y rclone
          
          echo "Configuring rclone..."
          mkdir -p ~/.config/rclone
          
          # Create rclone configuration
          cat << EOF > ~/.config/rclone/rclone.conf
          [R2]
          type = s3
          provider = Cloudflare
          access_key_id = ${{ secrets.R2_ACCESS_KEY_ID }}
          secret_access_key = ${{ secrets.R2_SECRET_ACCESS_KEY }}
          region = auto
          endpoint = ${{ secrets.R2_ENDPOINT }}
          EOF
          
          echo "Checking source directory..."
          ls -la "$SOURCE_DIR"
          
          echo "Uploading to R2..."
          if ! rclone copy "$SOURCE_DIR" "R2:bazzite" --progress --verbose; then
            echo "Error: Failed to upload to R2"
            exit 1
          fi
          
          echo "Upload completed successfully"

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up temporary files..."
          sudo docker system prune -f || true
          sudo rm -rf "${{ github.workspace }}/bazzite.repo" || true
